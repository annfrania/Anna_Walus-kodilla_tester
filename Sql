Zadanie 1
CREATE TABLE ISSUESLIST
(
    ID          SERIAL PRIMARY KEY,
    NAME        VARCHAR(100)
);
CREATE TABLE ISSUES
(
    ID                SERIAL PRIMARY KEY,
    ISSUESLIST_ID     BIGINT UNSIGNED NOT NULL,
    SUMMARY        	  VARCHAR(100),
    DESCRIPTION       VARCHAR(1024),
    USER_ID_ASSIGNEDTO BIGINT UNSIGNED NOT NULL,
    FOREIGN KEY (ISSUESLIST_ID) REFERENCES ISSUESLIST(ID),
    FOREIGN KEY (USER_ID_ASSIGNEDTO) REFERENCES USERS2(ID)
);
COMMIT;

INSERT INTO ISSUESLIST (NAME)
VALUES ("To Do");
INSERT INTO ISSUESLIST (NAME)
VALUES ("In Progress");
INSERT INTO ISSUESLIST (NAME)
VALUES ("Done");

COMMIT;

SELECT*FROM ISSUESLIST;
SELECT*FROM ISSUES;

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION,USER_ID_ASSIGNEDTO)
VALUES (1, "Appointment","Schedule the appointments for next week.",2);
INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION,USER_ID_ASSIGNEDTO)
VALUES (1, "Shopping","Shop for office essentials.",3);
INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION,USER_ID_ASSIGNEDTO)
VALUES (1, "Report","Prepare a weekly report.",1);
INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION,USER_ID_ASSIGNEDTO)
VALUES (1, "Meeting","Get presentation ready for the meeting",5);
INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION,USER_ID_ASSIGNEDTO)
VALUES (1, "Information","Inform all workers about time of the meeting.",4);


INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION,USER_ID_ASSIGNEDTO)
VALUES (2, "Phone calls","Make phone calls to main customers.",2);
INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION,USER_ID_ASSIGNEDTO)
VALUES (2, "Customers Meetings","Schedule meetings with customers",3);
INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION,USER_ID_ASSIGNEDTO)
VALUES (2, "Party","Look for a place for the annual Christmas party.",4);
INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION,USER_ID_ASSIGNEDTO)
VALUES (2, "Party Food","Look for a catering for the party.",1);
INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION,USER_ID_ASSIGNEDTO)
VALUES (2, "List","Make a list of workers for the party.",5);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION,USER_ID_ASSIGNEDTO)
VALUES (3, "Facebook","Create a post about new offer.",3);
INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION,USER_ID_ASSIGNEDTO)
VALUES (3, "Order","Place an order for December.",2);
INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION,USER_ID_ASSIGNEDTO)
VALUES (3, "Call service","Call servive for copy machine.",2);
INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION,USER_ID_ASSIGNEDTO)
VALUES (3, "Instagram","Create a IG post about new offer.",3);
INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION,USER_ID_ASSIGNEDTO)
VALUES (3, "Present","Get a present for boss.",1);
COMMIT;
SELECT*FROM ISSUES;


Zadanie 2
Tylko właśnie moja tabela użytkowników to Users2, bo tam coś namieszałam przy Users i chciałam zrobić ją od początku.

SELECT L.NAME,I.SUMMARY,I.DESCRIPTION
FROM ISSUESLIST L
JOIN ISSUES I ON I.ISSUESLIST_ID = L.ID;

SELECT U.LASTNAME,U.FIRSTNAME,I.SUMMARY,I.DESCRIPTION
FROM USERS2 U
JOIN ISSUES I ON I.USER_ID_ASSIGNEDTO = U.ID;

SELECT U.FIRSTNAME, U.LASTNAME, COUNT(*) AS ISSUES_NUMBER
FROM ISSUES I
JOIN USERS2 U ON I.USER_ID_ASSIGNEDTO = U.ID
GROUP BY U.LASTNAME
HAVING COUNT(*) > 1;

Zadanie 3
No a Posts to Posts2 oczywiście ;)

INSERT INTO POSTS2 (USER_ID, BODY)
VALUES (3, "Hello. I'm new here :)");

INSERT INTO POSTS2 (USER_ID, BODY)
VALUES (2, "Does anyone need help?");

INSERT INTO POSTS2 (USER_ID, BODY)
VALUES (5, "Hi.Nice to meet you, guys.");

SELECT * FROM POSTS2;

COMMIT;

UPDATE POSTS2
SET BODY = "TO DELETE"
WHERE ID>6 AND ID<10;

COMMIT;

DELETE FROM POSTS2
WHERE ID>6 AND ID<10;

COMMIT;

